#!/usr/bin/env ruby
# Copyright 2011, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


require 'rubygems'
require 'net/http'
require 'net/http/digest_auth'
require 'uri'
require 'json'
require 'getoptlong'

# Whether or not we will spit out debugging information.
$debug = false

# Our default hostname.  We default to localhost.
$hostname = ENV["CROWBAR_IP"] || "127.0.0.1"
# If hostname looks like an IPv6 address, assume it is.
# If it has a colon in it, it looks like an IPv6 address.
$hostname = "[#{$hostname}]" if $hostname.include?(":")
$port = 3000
$url = nil
$data = ""
$timeout = 500
if File.file?("/etc/crowbar.install.key")
  $key = IO.read("/etc/crowbar.install.key").strip
else
  $key = ENV["CROWBAR_KEY"]
end
$username, $password = $key.split(':',2) if $key
$attributes = nil

def debug(foo)
  STDERR.puts("DEBUG: #{foo}") if $debug
end

def maybe_json_die(json,code)
  case
  when code < 300 then return
  when (code == 404) || (code == 409)
    STDERR.puts(JSON.pretty_generate(json))
    exit 1
  else
    STDERR.puts(JSON.pretty_generate(json))
    STDERR.puts("Return code: #{code}")
    raise ""
  end
end

#
# Parsing options can be added by adding to this list before calling opt_parse
#
$options = [
    [ [ '--username', '-U', GetoptLong::REQUIRED_ARGUMENT ], "--username <username> or -U <username>  - specifies the username" ],
    [ [ '--password', '-P', GetoptLong::REQUIRED_ARGUMENT ], "--password <password> or -P <password>  - specifies the password" ],
    [ [ '--hostname', '-n', GetoptLong::REQUIRED_ARGUMENT ], "--hostname <name or ip> or -n <name or ip>  - specifies the destination server" ],
    [ [ '--port', '-p', GetoptLong::REQUIRED_ARGUMENT ], "--port <port> or -p <port> - specifies the destination server port" ],
    [ [ '--url', GetoptLong::REQUIRED_ARGUMENT ], "--url <http://host:port> - specifies the API address URL" ],
    [ [ '--debug', '-d', GetoptLong::NO_ARGUMENT ], "--debug or -d - turns on debugging information" ],
    [ [ '--data', GetoptLong::REQUIRED_ARGUMENT ], "--data <data> - used by create or edit as data (must be in json format)" ],
    [ [ '--file', GetoptLong::REQUIRED_ARGUMENT ], "--file <file> - used by create or edit as data when read from a file (must be in json format)" ],
    [ [ '--attributes', GetoptLong::REQUIRED_ARGUMENT ], "--attributes <attribute,attribute,...> - Return just the selected attributes from the server objects." ],
    [ [ '--timeout', GetoptLong::REQUIRED_ARGUMENT ], "--timeout <seconds> - timeout in seconds for read http reads" ]
]

# Extract common options out of ARGV.
# This only handles global options, we don't have a coherent strategy for
# handling per-command options yet.
def opt_parse
  sub_options = $options.map { |x| x[0] }
  lsub_options = $options.map { |x| [ x[0][0], x[2] ] }
  opts = GetoptLong.new(*sub_options)

  opts.each do |opt, arg|
    case opt
    when '--debug'
      $debug = true
    when '--url'
      $url = arg
    when '--hostname'
      $hostname = arg
    when '--username'
      $username = arg
    when '--password'
      $password = arg
    when '--port'
      $port = arg.to_i
    when '--data'
      $data = arg
    when '--timeout'
      $timeout = arg
    when '--attributes'
      $attributes = JSON.generate(arg.split(','))
    when '--file'
      $data = File.read(arg)
    else
      found = false
      lsub_options.each do |x|
        next if x[0] != opt
        eval x[1]
        found = true
      end
      show_help unless found
    end
  end
end

# Common REST functions.  They are in their own class
# to prevent being polluted by CrowbarProxy specific things.
class REST

  # Handle digest authentication.
  def self.authenticate(req,uri,data=nil)
    request_headers={
      "Accept" => "application/json",
      "Content-Type" => "application/json"}
    request_headers['x-return-attributes']=$attributes if $attributes
    uri.user=$username
    uri.password=$password
    res=nil
    Net::HTTP.start(uri.host, uri.port) {|http|
      http.read_timeout = $timeout
      r = req.new(uri.request_uri,request_headers)
      r.body = data if data
      res = http.request r
      debug "(a) return code: #{res.code}"
      debug "(a) return body: #{res.body}"
      debug "(a) return headers:"
      res.each_header do |h, v|
        debug "#{h}: #{v}"
      end if $debug

      if res['www-authenticate']
        debug "(a) uri: #{uri}"
        debug "(a) www-authenticate: #{res['www-authenticate']}"
        debug "(a) req-method: #{req::METHOD}"
        auth=Net::HTTP::DigestAuth.new.auth_header(uri,
                                                   res['www-authenticate'],
                                                   req::METHOD)
        r.add_field 'Authorization', auth
        res = http.request r
      end
    }
    res
  end

  # Common data and debug handling.
  def self.go(verb,path,data=nil)
    if $url
      uri = URI.parse("#{$url}/#{path}" )
    else
      uri = URI.parse("http://#{$hostname}:#{$port}/#{path}" )
    end
    # We want to give valid JSON to the API, so if we were
    # handed an array or a hash as the data to be messed with,
    # turn it into a blob of JSON.
    data = data.to_json if data.is_a?(Array) || data.is_a?(Hash)
    res = authenticate(verb,uri,data)
    debug "(#{verb}) hostname: #{uri.host}:#{uri.port}"
    debug "(#{verb}) request: #{uri.path}"
    debug "(#{verb}) data: #{data}"
    debug "(#{verb}) return code: #{res.code}"
    debug "(#{verb}) return body: #{res.body}"
    [ JSON.parse(res.body), res.code.to_i ]
  end

  def self.get(path)
    go(Net::HTTP::Get,path)
  end

  def self.post(path, data=nil)
    go(Net::HTTP::Post,path,data)
  end

  def self.put(path, data=nil)
    go(Net::HTTP::Put,path,data)
  end

  def self.delete(path)
    go(Net::HTTP::Delete,path)
  end
end

# Command encapsulates common logic for deriving a commandline
# template from a method.
class Command

  # The final method that will be invoked when run() is called.
  attr_reader :meth


  def initialize(meth,target=nil)
    cmdline = meth.name.to_s.split('_')
    # If the first part of the method name is do, then this is an instance method.
    # As such, we will need to wrap the actual method call in a lambda that instantiates
    # the instance first.
    wrap = cmdline[0] == "do"

    # Validate each part of our commandline to make sure it is OK.
    cmdline.each do |p|
      if p[0...1] == p[0...1].upcase
        # Val and Json are special.
        # Val indicates that no processing should be done to this parameter
        # Json indicates that this parameter should be valid json.
        next if ["Val", "Json", "String"].member?(p)
        # Anything else must be something that is a subclass of CrowbarProxy.
        klass = OpenCrowbar.const_get(p)
        next if klass &&
          klass.respond_to?(:superclass) &&
          klass.ancestors.member?(CrowbarProxy)
        # This is an exception because it is for developers, not end users.
        raise("Argument of class #{p} cannot use to build #{cmdline.join(" ")}")
      end
    end
    # Build the command signature array.
    # If the receiver of the method we are introspecting on has an apiname
    # method, then meth.receiver.apiname is the always the first part of the
    # commandline.
    @cmd = []
    target ||= meth.receiver
    if target.respond_to?(:apiname)
      @cmd << target.apiname
      if wrap
        # If this is a wrapped method, cmdline starts with "do", which we don't care about.
        cmdline.shift
        # Wrapped methods require their first argument to be an instance
        # of the class they need to operate on.  The commandline processing
        # code will make sure the instance gets created.
        c = cmdline.shift
        @cmd << "#{c}_#{target.argname}"
      end
    end
    # Iterate over the stuff in our cmdline, joining them wherever the next one is
    # a variable (as indicated by starting with an uppercase letter).  When we build a
    # command tree, this will be split back apart.
    while !cmdline.empty? do
      c = cmdline.shift
      if c[0...1] == c[0...1].upcase
        @cmd[-1] = "#{@cmd[-1]}_#{c}"
      else
        @cmd << c
      end
    end
    @target = target
    # Handle dealing with instance methods appropriately.
    @meth = wrap ? Proc.new{|o,*rest| o.send(meth.name,*rest)} : meth
    debug("New command: #{self.inspect}")
  end

  # Stupid default help.  It works well enough as a hint, but we will need
  # something more ornate for production.
  def help
    @cmd.map{|c| c.split("_")}.flatten.map do |c|
      case
      when c == c.downcase then c
      when c == "Val" then "<ID or name>"
      when c == "Json" "<JSON>"
      when c == "String" "<string>"
      else "<#{c}>"
      end
    end.join(" ")
  end

  # Make sure that we do not inadvertently kill the instance variable.
  def cmd
    @cmd.dup
  end

  def run(*params)
    @meth.call(*params)
  end

  def name
    @cmd.join(" ")
  end
end

# CommandTree handles building a tree of possible command lines.
# It makes sure that we always know how to parse a command line,
# and makes sure that developers cannot add conflicting commands.
class CommandTree
  attr_reader :keyword, :args, :runner
  attr_accessor :parent

  def initialize(keyword=nil, args=[], runner=nil)
    @keyword = keyword
    @args = args
    @runner = runner
    @children = Hash.new
    @parent = nil
  end

  def [](k)
    @children[k]
  end

  def children
    @children.keys.sort.map{|k| @children[k]}
  end

  def []=(k,v)
    if @children[k]
      STDERR.puts("Conflicting entries in the command tree:")
      STDERR.puts("Already have:")
      STDERR.puts("   #{@children[k].name}")
      STDERR.puts("Trying to add:")
      STDERR.puts("   #{v.name}")
      raise("Conflicting entries in the CommandTree while adding#{v.inspect}")
    end
    v.parent = self if v.is_a?(CommandTree)
    @children[k] = v
  end

  def name
    res = []
    res << "#{parent.name}" unless @parent.nil?
    res << @keyword unless @keyword.nil?
    res << @args unless @args.nil?
    res.flatten.join(" ")
  end
end

# The base class for all Crowbar commandline providers.
# They will wind up being roughly grouped by controller or
# barclamp name.
class CrowbarProxy

  def self.apiname
    "#{name.downcase.split("::").last}s"
  end

  def self.argname
    name.split("::").last
  end

  def self.path
    "api/v2/#{apiname}"
  end

  # This should be passed either:
  # 1: A name or ID for the things to retrieve from the server
  # 2: A pre-retrieved blob of JSON.
  def initialize(blob,*rest)
    case
    when blob.is_a?(String) || blob.is_a?(Integer)
      @blob,res = REST.get("#{self.class.path}/#{blob}")
      maybe_json_die(@blob,res)
    when blob.is_a?(Hash)
      @blob = blob
    else
      raise("Cannot cast #{blob.inspect} into a #{self.class.name}}")
    end
  end

  # Common CRUD operations.
  # List things.
  def self.list(*rest)
    objs, res = REST.get(path)
    maybe_json_die(objs,res)
    objs.map{|o| self.new(o)}
  end

  # Create a new thing from a blob of JSON.
  # The server side will handle all sanity checking.
  def self.create_Json(data, *rest)
    obj, res = REST.post(path,data)
    maybe_json_die(obj,res)
    self.new(obj)
  end

  # Spit out basic help for CRUD operations on this thing.
  def self.help
    STDERR.puts "Commands for #{apiname}:"
    commands.sort{|a,b| a.cmd <=> b.cmd}.each do |k|
      STDERR.puts "    #{k.help}"
    end
  end

  # Generate an array of Command objects for the appropriate class and/or
  # instance methods on this thing.
  def self.commands
    res = []
    res << Command.new(self.method(:list),self)
    res << Command.new(self.method(:create_Json),self)
    res << Command.new(self.method(:help),self)
    # We generate commands for any instance methods that start with do_
    (public_instance_methods - CrowbarProxy.superclass.public_instance_methods).each do |m|
      next unless m.to_s =~ /^do_([^_]+)/
      res << Command.new(instance_method(m),self)
    end
    res
  end

  def [](k)
    @blob[k]
  end

  def []=(k,v)
    raise("Cannot modify #{k}") if k =~ /(^(name|order))|(.*_(id|at))$/
    do_update_Json({k => v}.to_json)
  end

  def id
    @blob["id"]
  end

  # Reload this thing.
  def reload
    @blob,res = REST.get("#{self.class.path}/#{id}")
    maybe_json_die(@blob,res)
    self
  end

  # Push an update to this thing back to the server.
  # Save the updated version we get back.
  def do_update_Json(data, *rest)
    obj, res = REST.put("#{self.class.path}/#{id}",data)
    maybe_json_die(obj,res)
    @blob = obj
    self
  end

  # Destroy this thing.
  def do_destroy(*rest)
    obj,res = REST.delete("#{self.class.path}/#{id}")
    maybe_json_die(obj,res)
    obj
  end

  # Show this thing.  We automatically show everything as JSON.
  def do_show
    self
  end

  # Turn this thing into a JSON string.
  def to_json
    JSON.pretty_generate(@blob)
  end

  def to_hash
    @blob.dup
  end
end

# Handy helper for dealing with objects that have Crowbar attribs.
class ProxyWithAttribs < CrowbarProxy

  def do_attribs(*rest)
    objs,res = REST.get("#{self.class.path}/#{id}/attribs")
    maybe_json_die(objs,res)
    objs.map{|o|OpenCrowbar::Attrib.new(o)}
  end

  def do_get_attrib_Attrib(attrib,*rest)
    obj,res = REST.get("#{self.class.path}/#{id}/attribs/#{attrib.id}")
    maybe_json_die(obj,res)
    OpenCrowbar::Attrib.new(obj)
  end

  def do_set_attrib_Attrib_to_Json(attrib,value,*rest)
    unless value.keys == ["value"]
      raise "JSON passed to set an attrib must have a single key named value"
    end
    obj,res = REST.put("#{self.class.path}/#{id}/attribs/#{attrib.id}",value)
    maybe_json_die(obj,res)
    OpenCrowbar::Attrib.new(obj)
  end

  def do_propose(*rest)
    obj,res = REST.put("#{self.class.path}/#{id}/propose")
    maybe_json_die(obj,res)
    @blob = obj
    self
  end

  def do_commit(*rest)
    obj,res = REST.put("#{self.class.path}/#{id}/commit")
    maybe_json_die(obj,res)
    @blob = obj
    self
  end

  def do_retry(*rest)
    obj,res = REST.put("#{self.class.path}/#{id}/retry")
    maybe_json_die(obj,res)
    @blob = obj
    self
  end

end

module OpenCrowbar
  class Node < ProxyWithAttribs

    def name
      @blob["name"]
    end

    def do_power_Val(action,*rest)
      obj, res = REST.put("#{self.class.path}/#{id}/power?poweraction=#{action}")
      maybe_json_die(obj,res)
      obj
    end

    def do_debug(*rest)
      obj, res = REST.put("#{self.class.path}/#{id}/debug")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_undebug(*rest)
      obj, res = REST.put("#{self.class.path}/#{id}/undebug")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_redeploy(*rest)
      obj, res = REST.put("#{self.class.path}/#{id}/redeploy")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_commit(*rest)
      obj, res = REST.put("#{self.class.path}/#{id}/commit")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_noderoles(*rest)
      objs,res = REST.get("#{self.class.path}/#{id}/node_roles")
      maybe_json_die(objs,res)
      objs.map{|o|NodeRole.new(o)}
    end

    def do_alladdresses(*rest)
      objs,res = REST.get("#{self.class.path}/#{id}/addresses")
      maybe_json_die(objs,res)
      objs
    end

    def do_addresses_on_Network(network,*rest)
      objs,res = REST.get("#{self.class.path}/#{id}/addresses?network=#{network.id}")
      maybe_json_die(objs,res)
      objs
    end

    def do_move_to_Deployment(deploy,*rest)
      do_update_Json({"deployment_id" => deploy.id})
    end
  end

  class Deployment < ProxyWithAttribs
    def name
    @blob["name"]
    end

    def do_recall(*rest)
      obj,res = REST.put("#{self.class.path}/#{id}/recall")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_nodes(*rest)
      objs,res = REST.get("#{self.class.path}/#{id}/nodes")
      maybe_json_die(objs,res)
      objs.map{|o|Node.new(o)}
    end

  end

  class Role < ProxyWithAttribs

    def name
      @blob["name"]
    end

    def do_bind_to_Node(node, *rest)
      obj,res = REST.post("#{NodeRole.path}",JSON.generate({:node_id => node.id, :role_id => id}))
      maybe_json_die(obj,res)
      NodeRole.new(obj)
    end

  end

  class DeploymentRole < ProxyWithAttribs
    def self.path
      "api/v2/deployment_roles"
    end

    def do_propose(*rest)
      obj,res = REST.put("#{self.class.path}/#{id}/propose")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

    def do_commit(*rest)
      obj,res = REST.put("#{self.class.path}/#{id}/commit")
      maybe_json_die(obj,res)
      @blob = obj
      self
    end

  end

  class NodeRole < ProxyWithAttribs
    def self.path
      "api/v2/node_roles"
    end

  end

  class Hammer < CrowbarProxy
    def self.path
      "api/v2/hammers"
    end

    def do_perform_Json(data, *rest)
      obj,res = REST.post("#{self.class.path}/#{id}/perform",data)
      maybe_json_die(obj,res)
      obj
    end

  end

  class AvailableHammer < CrowbarProxy
    def self.path
      "api/v2/available_hammers"
    end
  end

  class Barclamp < CrowbarProxy; end
  
  class User < ProxyWithAttribs

    def self.path
      "api/v2/users"
    end

    def name
      @blob["name"]
    end

    def do_password_set_String(password)
      data = {password: password, password_confirmation: password}
      obj, res = REST.put("#{self.class.path}/#{id}/reset_password",data)
      maybe_json_die(obj,res)
      obj
    end

  end
  
  class Attrib < CrowbarProxy; end

  class Jig < CrowbarProxy; end

  class Network < CrowbarProxy
    def self.path
      "api/v2/networks"
    end

    def do_router_Json(data)
      obj, res = REST.post("#{self.class.path}/#{id}/network_routers",data)
      obj, res = REST.put("#{self.class.path}/#{id}/network_routers/any",data) if res == 409
      maybe_json_die(obj,res)
      obj
    end

    def do_routershow
      obj, res = REST.get("#{self.class.path}/#{id}/network_routers/any")
      maybe_json_die(obj,res)
      obj
    end

    def do_routerdestroy()
      obj, res = REST.delete("#{self.class.path}/#{id}/network_routers/any")
      maybe_json_die(obj,res)
      obj
    end

  end
end

opt_parse

$commands = CommandTree.new

def converge
    loop do
    obj, res = REST.get("api/v2/anneal")
    exit(0) if res == 200
    raise("Unable to converge roles") if res == 409
    raise("Failed to talk to Crowbar") if res >= 300
    sleep 10
  end
end

$commands["converge"] = Command.new(method(:converge))

def show_help(c)
  case
  when c.is_a?(Command)
    debug("Showing help for #{c.inspect}")
    STDERR.puts(c.help)
  when c.runner then show_help(c.runner)
  else
    c.children.each do |child|
      show_help(child)
    end
  end
end

def help
  STDERR.puts("crowbar -- CLI wrapper around the Crowbar API")
  STDERR.puts("Usage: crowbar [global options] command [command options]")
  STDERR.puts("Global options:")
  $options.each do |o|
    STDERR.puts("   #{o[1]}")
  end
  STDERR.puts("")
  STDERR.puts("How to read the command descriptions:")
  STDERR.puts("1: Anything in <angle brackets> is a parameter to be passed.")
  STDERR.puts("   The text in the angle brackets == the object type that will be used.")
  STDERR.puts("   For <Json>, the JSON blob must be syntactically valid.")
  STDERR.puts("   For anything else, it can be either the unique numeric ID of an object")
  STDERR.puts("   or a unique name for the object, if it has one.")
  STDERR.puts("2: Everything else is a required keyword in the command name.")
  STDERR.puts("   Required keywords must be in order")
  STDERR.puts("   Things in <angle brackets> must come immediately after their required keyword")
  STDERR.puts("Anything else will be treated as a non-required parameter to the command.")
  STDERR.puts("")
  STDERR.puts("Commands:")
  show_help($commands)
end

$commands["help"] = Command.new(method(:help))

# Figure out all of things we need to generate commands for.
OpenCrowbar.constants.each do |mod|
  mod = OpenCrowbar.const_get(mod)
  # We want all classes that inherit from CrowbarProxy.
  next unless mod.respond_to?(:superclass) &&
    !mod.superclass.nil? &&
    mod.ancestors.member?(CrowbarProxy) &&
    mod != CrowbarProxy
  mod.commands.each do |command|
    # Build out our command tree.
    tree = $commands
    parts = command.cmd
    debug("Adding #{parts.join(" ")} to the command tree.")
    while !parts.empty? do
      args = parts.shift.split('_')
      cmd = args.shift
      if parts.empty?
        # this needs to be the end of this particular branch of the command tree.
        tree[cmd] = args.empty? ? command : CommandTree.new(cmd,args,command)
        break
      end
      tree[cmd] = CommandTree.new(cmd,args) unless tree[cmd]
      # If we wind up with overlapping conflicting commands, whine alot.
      # Hopefully the target of our ire will be developers and not end users.
      unless tree[cmd].is_a?(CommandTree) &&
          tree[cmd].args == args &&
          !tree[cmd].runner
        STDERR.puts("Already have:")
        STDERR.puts("   #{tree[cmd].name}")
        STDERR.puts("Want to have:")
        STDERR.puts("   #{command.name}")
        exit(1)
      end
      tree = tree[cmd]
    end
  end
end

# Actually figure out what we should do based on the command line we were passed.
def run_command
  STDERR.puts "CROWBAR_KEY not set, will not be able to authenticate!" if $username.nil? or $password.nil?
  STDERR.puts "Please set CROWBAR_KEY or use -U and -P" if $username.nil? or $password.nil?
  params = Array.new
  rest = Array.new
  command = $commands
  while !ARGV.empty? do
    arg = ARGV.shift
    debug("cmdline_part: #{arg}, command: #{command.name}")
    # If command is a Command object, then we are at a terminal node in the tree,
    # and as such we have gathered all the mandatory parameters for the command
    # into the params array.  Anything left in the command line is an optional argument.
    # Remember that opt_parse stripped out all the global options beforehand.
    # If command is a CommandTree object (which is the only other thing that
    # can be in the tree rooted at $commands), and we don't have a choice for it right now,
    # then it is also an optional argument.
    # Handling it this way allows you to partially interleave required and
    # optional parts of a command.
    if command.is_a?(Command) || command[arg].nil?
      rest << arg
    else
      # Walk down one level in the command tree.
      command = command[arg]
      # If we wound up with a Command object, everything else left in ARGV
      # is optional, and will be caught on the next pass.
      next if command.is_a?(Command)
      command.args.each do |template|
        # If this position in the command tree needs to capture parameters for
        # the final method, that will happen here.
        arg = ARGV.shift
        debug("cmdline_arg: #{arg}, command #{command.name}")
        raise("Ran out of arguments for #{command.name} at #{template}") unless arg
        case template
        when "Val"
          # Val arguments are captured unchanged, and it will be up to whatever
          # method that finally gets invoked to do the Right Thing to them.
          params << arg
        when "Json"
          # We parse Json arguments directly, and capture the parsed value.
          # If parsing fails due to invalid JSON, we say so end exit.
          begin
            params << JSON.parse(arg)
          rescue
            STDERR.puts("#{arg} is not valid JSON!")
            exit(1)
          end
        when "String"
          # We parse String arguments directly, and capture the parsed value.
          begin
            params << arg
          rescue
            STDERR.puts("#{arg} is not valid string!")
            exit(1)
          end
        else
          # Anything else is a subclass of CrowbarProxy that should be instantiated.
          # Go ahead and instantiate it here, and capture the result to pass to the
          # Command object that will be eventually invoked.
          begin
            klass = OpenCrowbar.const_get(template)
            params << klass.new(arg)
          rescue
            STDERR.puts("#{arg} is not a #{template}")
            exit(1)
          end
        end
      end
    end
  end
  if command.is_a?(CommandTree)
    if command.runner.nil?
      STDERR.puts("Incomplete command #{command.name}!")
      STDERR.puts("Try 'crowbar help'.")
      exit(1)
    else
      command = command.runner
    end
  end
  res = command.run(*(params + rest))
  exit(0) if command.cmd[-1] == "help"
  # We will blow up if we get back non-JSON errors, but that is OK for now.
  puts JSON.pretty_generate(res.is_a?(Array) ? res.map{|a|a.to_hash} : res.to_hash)
end

run_command
