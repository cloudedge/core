- providers = Provider.all.to_a.keep_if { |p| p.can_create_nodes }
- available_os = Attrib.get("provisioner-available-oses", admin).map{ |k,v| k } rescue [ t('default') ]

%table{:width=>'100%'}
  %tr
    %td
      %h1= t '.title'
    %td{:align=>'right'}
      - if providers and providers.count > 0
        = link_to t('.create_nodes'), providers_path
        = text_field_tag :name, t('.name_base'), :size => 15
        = select :add, :provider, options_for_select(providers.map{|p| p.name}, providers.first)
        = select :add, :os, options_for_select(available_os, available_os.first)
        = text_field_tag :number, 1, :size => 2
        %button{:onclick=>"add_nodes()"}= t('add')
      - else
        = link_to t('.no_providers'), providers_path, :class=>:button
- if @list.length == 0
  %p= t '.no_nodes'
- else
  = render :partial => 'index', :locals=>{:nodes => @list}

.clear

:javascript

  function add_nodes() {
    var base_name = $("#name").val();
    var provider = $("#add_provider").val();
    var os = $("#add_os").val();
    var number = parseInt($("#number").val());
    for (var i=0; i<number; i++) {
      $.post("#{nodes_path}",
        {
          name: base_name+"-"+i+"."+provider+".neode.org",
          description: "created by #{current_user.username}",
          provider: provider,
          hints: { 
            'use-proxy': false,
            'use-ntp': false,
            'use-dns': false,
            'use-logging': false,
            'provider-create-hint': { 
              os: os,
              hostname: base_name+"_"+i
              }
            }
          },
        function(data, status){ 
          if (status=="success") { location.reload(); } 
      })
      .fail(function(jqXHR, textStatus, errorThrown) {
        alert("#{t('.create_failed')}: " + textStatus + " " + errorThrown);
        //break;
      });
    };
  }

  function update() {

    if (#{params.include?(:nopoll) ? 'false' : 'true'}) {
      $.ajaxSetup({ timeout: #{current_user.settings(:ui).fast_refresh} })

      $.getJSON('#{nodes_status_path()}', function(data) {
        
        // If node count has changed, re-render the page
        var current_nodes = $('.node').length;
        
        // Update nodes
        var count = 0;
        $.each(data, function(id,node) {
          count ++;
          if (count > current_nodes) {
          	location.reload();
          	return;
          }
          var tr = $('#'+id+'.node');
          var td = tr.children('.status');
          var led = td.children('.led');
          if(led.attr('raw') != node['state']) {
            led.destroy();
            led.attr('class', 'led '+node['status']);
            led.attr('raw', node['state']);
            td.effect("highlight", {color: '#666666'}, 2000);
            led.attr('title', node['status']);
          }
          var status = tr.children('.strStatus');
          if(status.html() != node['strStatus']) {
            status.destroy();
            status.html(node['strStatus']);
            status.effect("highlight", {color: '#666666'}, 2000);
          }
        });
      });
    }
  }